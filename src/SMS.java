/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Mostafa Youssef
 */

import org.smslib.AGateway;
import org.smslib.IOutboundMessageNotification;
import org.smslib.Library;
import org.smslib.OutboundMessage;
import org.smslib.Service;
import org.smslib.modem.SerialModemGateway;
import gnu.io.*;

public class SMS extends javax.swing.JFrame {
public static SMS smsApp;
    /**
     * Creates new form sms
     */
    public SMS() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonDetect = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaLog = new javax.swing.JTextArea();
        jTextFieldCellPhoneNo = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaMessage = new javax.swing.JTextArea();
        jComboBoxPorts = new javax.swing.JComboBox();
        jButtonListPort = new javax.swing.JButton();
        jButtonSend = new javax.swing.JButton();
        jButtongetModemInfo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SMS App");

        jButtonDetect.setText("Detect Comm and Device");
        jButtonDetect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDetectActionPerformed(evt);
            }
        });

        jTextAreaLog.setColumns(20);
        jTextAreaLog.setRows(5);
        jScrollPane1.setViewportView(jTextAreaLog);

        jTextFieldCellPhoneNo.setText("+201127333021");

        jTextAreaMessage.setColumns(20);
        jTextAreaMessage.setFont(new java.awt.Font("Courier New", 1, 14)); // NOI18N
        jTextAreaMessage.setLineWrap(true);
        jTextAreaMessage.setRows(5);
        jTextAreaMessage.setText("This SMS Message is Sent from a Desktop Computer Application Using a Mobile Phone as GSM/GPRS Modem.  Subscribe My Channel and Give This Video a Thumbs Up. IMPORTANT: Don't forget to click or watch Ads that appear in this my YouTube tutorial video.");
        jScrollPane2.setViewportView(jTextAreaMessage);

        jButtonListPort.setText("List Port");
        jButtonListPort.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonListPortActionPerformed(evt);
            }
        });

        jButtonSend.setText("Send SMS");
        jButtonSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSendActionPerformed(evt);
            }
        });

        jButtongetModemInfo.setText("Modem Information");
        jButtongetModemInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtongetModemInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonListPort, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtonSend, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButtongetModemInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 457, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonDetect)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTextFieldCellPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, 283, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jComboBoxPorts, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButtonDetect)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextFieldCellPhoneNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxPorts, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButtonListPort)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonSend)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtongetModemInfo)))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDetectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDetectActionPerformed
        // TODO add your handling code here:
        new PortsTest().getAndTestCOMPorts();
        
        
    }//GEN-LAST:event_jButtonDetectActionPerformed

    private void jButtonListPortActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonListPortActionPerformed
      	jComboBoxPorts.removeAllItems();

        java.util.Enumeration<CommPortIdentifier> portEnum = CommPortIdentifier.getPortIdentifiers();
        while ( portEnum.hasMoreElements() ) 
        {
            CommPortIdentifier portIdentifier = portEnum.nextElement();
            //System.out.println(portIdentifier.getName()  +  " - " +  getPortTypeName(portIdentifier.getPortType()) );
            jComboBoxPorts.addItem(portIdentifier.getName());
            jTextAreaLog.append("\n" + portIdentifier.getName()  +  " - " +  getPortTypeName(portIdentifier.getPortType()) + "\n");
        }

        
    }//GEN-LAST:event_jButtonListPortActionPerformed

    private void jButtonSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSendActionPerformed
             try{
            sendSMS();
        }catch(Exception e){
            e.printStackTrace();
        }

        
    }//GEN-LAST:event_jButtonSendActionPerformed

    private void jButtongetModemInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtongetModemInfoActionPerformed
               try{
            getModemInfo();
        }catch(Exception e){
            e.printStackTrace();
        }
        
        
    }//GEN-LAST:event_jButtongetModemInfoActionPerformed
  
  public void getModemInfo() throws Exception
        {    
                SerialModemGateway gateway = new SerialModemGateway("", jComboBoxPorts.getSelectedItem().toString(), 9600, "", "");

                Service.getInstance().addGateway(gateway);
                Service.getInstance().startService();
                
                jTextAreaLog.append("Modem Information:");
                jTextAreaLog.append("\n  Manufacturer: " + gateway.getManufacturer());
                jTextAreaLog.append("\n  Model: " + gateway.getModel());
                jTextAreaLog.append("\n  Serial No: " + gateway.getSerialNo());
                jTextAreaLog.append("\n  SIM IMSI: " + gateway.getImsi());
                jTextAreaLog.append("\n  Signal Level: " + gateway.getSignalLevel() + " dBm");
                jTextAreaLog.append("\n  Battery Level: " + gateway.getBatteryLevel() + "%");
                
           
                Service.getInstance().stopService();
                Service.getInstance().removeGateway(gateway);

        }
    
 public void sendSMS() throws Exception
        {
                OutboundNotification outboundNotification = new OutboundNotification();

                SerialModemGateway gateway = new SerialModemGateway("", jComboBoxPorts.getSelectedItem().toString(), 9600, "", "");
                gateway.setInbound(true);
                gateway.setOutbound(true);
                //gateway.setSimPin("0000");
                Service.getInstance().setOutboundMessageNotification(outboundNotification);
                Service.getInstance().addGateway(gateway);
                //String status = Service.getInstance().getServiceStatus().toString();
                //if(status=="STARTED"){}
                Service.getInstance().startService();

                

                OutboundMessage msg = new OutboundMessage(jTextFieldCellPhoneNo.getText(), jTextAreaMessage.getText());

                Service.getInstance().sendMessage(msg);
                
                
                
                jTextAreaLog.append(msg.toString());
           

                Service.getInstance().stopService();
                Service.getInstance().removeGateway(gateway);
        }

        public class OutboundNotification implements IOutboundMessageNotification
        {
                public void process(AGateway gateway, OutboundMessage msg)
                {
                        System.out.println("Outbound handler called from Gateway: " + gateway.getGatewayId());
                        System.out.println(msg);
                }
        }  
   
    
    
static String getPortTypeName ( int portType )
    {
        switch ( portType )
        {
            case CommPortIdentifier.PORT_I2C:
                return "I2C";
            case CommPortIdentifier.PORT_PARALLEL:
                return "Parallel";
            case CommPortIdentifier.PORT_RAW:
                return "Raw";
            case CommPortIdentifier.PORT_RS485:
                return "RS485";
            case CommPortIdentifier.PORT_SERIAL:
                return "Serial";
            default:
                return "unknown type";
        }
    }
    void appendToJTextAreaLog(String txt)
    {
        jTextAreaLog.append(txt);
    } 
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SMS.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                smsApp = new SMS();
                smsApp.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDetect;
    private javax.swing.JButton jButtonListPort;
    private javax.swing.JButton jButtonSend;
    private javax.swing.JButton jButtongetModemInfo;
    private javax.swing.JComboBox jComboBoxPorts;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea jTextAreaLog;
    private javax.swing.JTextArea jTextAreaMessage;
    private javax.swing.JTextField jTextFieldCellPhoneNo;
    // End of variables declaration//GEN-END:variables
}
